openapi: "3.0.0"
info:
  title: YAML Config Editor REST API
  description: |
    <b>REST API for the YAML Config Editor Backend.</b>
  version: "1.0"

  # the domain of the service, it will be updated in final deployment
servers:
  - url: /api/{apiVersion}/
    variables:
      apiVersion:
        default: '1.0'
        description: The REST API version
security:
  - bearerAuth: []

paths:
  /log:
    post:
      summary: Log error
      description: Log the error, it will simply use console.log to log the error
      tags:
        - Maintanance
      security: []    # no authentication
      requestBody:
        description: The request
        content:
          application/json:
            schema:
              type: object
              required: 
                - message
              properties:
                message:
                  description: The error message to log
                  type: string

      responses:
        204:
          description: The operation succeeded.  
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'  

  /healthcheck:
    get:
      summary: Get the health check information
      description: Get the health check information
      tags:
        - Maintanance
      security: []    # no authentication

      responses:
        200:
          description: return healthcheck info
          content:
            application/json:
              schema:
                type: object
                properties:
                  version: 
                    description: The version
                    type: string
                  lastCommit:
                    type: object
                    properties:
                      commitHash: 
                        description: git SHA1 of last commit of the bitbucket repository to build the app
                        type: string
                      author: 
                        description: The author of last commit
                        type: string
                      commitDate:
                        description: The last commit date
                        type: string
                        format: date
        500:
          $ref: '#/components/responses/InternalServerError'  
  
  /userTypeAhead:
    get:
      parameters:
        - in: query
          name: prefix
          required: false
          schema:
            type: string
      summary: Get the usernames with the provided prefix
      description: Get the usernames with the provided prefix
      tags:
        - Maintanance
      security: []    # no authentication
      responses:
        200:
          description: return usernames
          content:
             application/json:
              schema:
                type: array
                items: 
                  type: string
        500:
          $ref: '#/components/responses/InternalServerError'  

  /defaultRepo:
    get:
      summary: Get default repo url and branch name.
      description: Get default repo url and branch name.
      tags:
        - Maintanance
      security: []    # no authentication
      responses:
        200:
          description: return default repo url and branch name
          content:
             application/json:
              schema:
                type: object
                required: 
                  - branchName
                  - repositoryUrl
                properties:
                  branchName:
                    description: The branch name
                    type: string
                    example: admin
                  repositoryUrl:
                    description: The repo URL
                    type: string
                    example: https://clientrepo.io/projects/repos/sample-repo
        500:
          $ref: '#/components/responses/InternalServerError'  

  /refreshConfiguration:
    post:
      summary: Reload the configuration from the provided config json file
      description: Reload the configuration, and apply the new configuration to the app. 
      tags:
        - Maintanance
      security: []    # no authentication
      requestBody:
        description: The request
        content:
          application/json:
            schema:
              type: object
              required: 
                - configURL
              properties:
                configURL:
                  description: The remote config json file URL
                  type: string
                  example: https://host-name/config.json
      responses:
        204:
          description: The operation succeeded.  
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'  


  /accessRepo:
    post:
      summary: Access/clone remote repository and receive the security token to be used in subsequent requests.
      description: |
        Clone remote repo and obtain request access token. By default 'admin' branch is clone, but optional branch parameter is also supported.
      tags:
        - FileManagement
      security: []    # no authentication
      requestBody:
        description: The repo access request
        content:
          application/json:
            schema:
              type: object
              required: 
                - repoURL
                - username
                - password
              properties:
                repoURL:
                  description: The remote repo URL 
                  type: string
                  example: https://clientrepo.io/projects/repos/sample-repo
                branchName:
                  description: The branch name 
                  type: string
                username:
                  description: The remote repo username
                  type: string
                password:
                  description: The remote repo password
                  type: string

      responses:
        200:
          description: |
            Successfully authenticated and cloned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: 
                    description: The token
                    type: string
                  validUntil: 
                    description: Valid until date
                    type: string
                    format: date 
                  repoName: 
                    description: The repo name
                    type: string
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/NotAuthorized'  
        403:
          $ref: '#/components/responses/Forbidden' 
        500:
          $ref: '#/components/responses/InternalServerError'  


  /repos/{repoName}/branches/{branchName}/applications:
    parameters:
      - $ref: '#/components/parameters/repoName'
      - $ref: '#/components/parameters/branchName'
    get:
      summary: List application names in the repo.
      description: |
        List application names in the repo.
      tags:
        - FileManagement
      security:
        - bearerAuth: []
      responses:
        200:
          description: The application names.
          content:
            application/json:
              schema:
                type: array
                items: 
                  type: string        
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/NotAuthorized'  
        403:
          $ref: '#/components/responses/Forbidden' 
        404:
          $ref: '#/components/responses/NotFound'          
        500:
          $ref: '#/components/responses/InternalServerError'   

  /repos/{repoName}/branches/{branchName}/applications/{appName}/environments:
    parameters:
      - $ref: '#/components/parameters/repoName'
      - $ref: '#/components/parameters/branchName'
      - $ref: '#/components/parameters/appName'
    get:
      summary: Get environments in the repo app.
      description: |
        Get environments in the repo app.
      tags:
        - FileManagement
      security:
        - bearerAuth: []
      responses:
        200:
          description: The available environments.
          content:
            application/json:
              schema:
                type: array
                items: 
                  type: string              
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/NotAuthorized'  
        403:
          $ref: '#/components/responses/Forbidden' 
        404:
          $ref: '#/components/responses/NotFound'    
        500:
          $ref: '#/components/responses/InternalServerError'

  /repos/{repoName}/branches/{branchName}/files:
    parameters:  
      - $ref: '#/components/parameters/repoName'
      - $ref: '#/components/parameters/branchName'
    get:
      summary: List the yaml files for the repo. Only yaml file in root folder are listed.
      description: |
        List the yaml files for the repo. Only yaml file in root folder are listed.
      tags:
        - FileManagement
      security:
        - bearerAuth: []
      responses:
        200:
          description: The file names and metadata.
          content:
            application/json:
              schema:
                type: array
                items: 
                  type: object
                  required: 
                    - applicationName
                    - fileName
                    - timestamp
                    - size
                  properties:
                    applicationName:
                      description: The application name. 
                      type: string
                    fileName:
                      description: The file name. 
                      type: string
                    timestamp:
                      description: The file timestamp. 
                      type: integer
                      format: int64
                    size:
                      description: The file size (in bytes). 
                      type: integer             
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/NotAuthorized'  
        403:
          $ref: '#/components/responses/Forbidden' 
        500:
          $ref: '#/components/responses/InternalServerError'  

  /repos/{repoName}/branches/{branchName}/applications/{appName}/files/{fileName}:
    parameters:  
      - $ref: '#/components/parameters/repoName'
      - $ref: '#/components/parameters/branchName'
      - $ref: '#/components/parameters/appName'
      - $ref: '#/components/parameters/fileName'
    get:
      summary: Get the file content.
      description: |
        Get the content of the file within the given location.
      tags:
        - FileManagement
      security:
        - bearerAuth: []
      responses:
        200:
          description: The file content.
          content:
            application/json:
              schema:
                type: object                
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/NotAuthorized'  
        403:
          $ref: '#/components/responses/Forbidden' 
        404:
          $ref: '#/components/responses/NotFound' 
        500:
          $ref: '#/components/responses/InternalServerError'  

    delete:
      summary: Delete the file within the given location from local and remote repos.
      description: |
        Delete the file from the repo.
      tags:
        - FileManagement
      security:
        - bearerAuth: []
      responses:
        204:
          description: The operation succeeded.      
        400:
          $ref: '#/components/responses/BadRequest'       
        401:
          $ref: '#/components/responses/NotAuthorized'    
        403:
          $ref: '#/components/responses/Forbidden' 
        404:
          $ref: '#/components/responses/NotFound' 
        500:
          $ref: '#/components/responses/InternalServerError'                

  /repos/{repoName}/branches/{branchName}/commit:
    parameters:  
      - $ref: '#/components/parameters/repoName'
      - $ref: '#/components/parameters/branchName'
    post:
      summary: Commits the files to remote origin.
      description: |
        Commits the files to remote origin. Please note, that only YAML files are supported. The server should perform the validation of the YAML file content against schema.
      tags:
        - FileManagement
      security:
        - bearerAuth: []
      requestBody:
        description: The file and metadata
        content:
          application/json:
            schema:
              type: object
              required: 
                - files
              properties:
                files:
                  description: The (YAML) files.
                  type: array
                  items:
                    type: object
                    required: 
                      - fileName
                      - fileContent
                      - applicationName
                    properties:
                      fileName:
                        description: The (YAML) file name. 
                        type: string
                      fileContent:
                        description: The (YAML) file content. 
                        type: object
                      applicationName:
                        description: The application name. 
                        type: string
                      timestamp:
                        description: The timestamp for optimistic check. 
                        type: integer
                        format: int64
                message:
                  description: The commit message
                  type: string
      responses:
        200:
          description: The file names and metadata.
          content:
            application/json:
              schema:
                type: array
                items: 
                  type: object
                  required: 
                    - applicationName
                    - fileName
                    - timestamp
                    - size
                  properties:
                    applicationName:
                      description: The application name. 
                      type: string
                    fileName:
                      description: The file name. 
                      type: string
                    timestamp:
                      description: The file timestamp. 
                      type: integer
                      format: int64
                    size:
                      description: The file size (in bytes). 
                      type: integer                          
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/NotAuthorized'  
        403:
          $ref: '#/components/responses/Forbidden' 
        409:
          $ref: '#/components/responses/Conflict' 
        500:
          $ref: '#/components/responses/InternalServerError'
 

 
components:
  #-------------------------------
  # Security
  #-------------------------------
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer


  #-------------------------------
  # Parameters
  #-------------------------------
  parameters:
    repoName:
      name: repoName
      in: path
      description: The repo name.
      required: true
      schema:
        type: string
      example: new-project-backend
    branchName:
      name: branchName
      in: path
      description: The branch name.
      required: true
      schema:
        type: string
      example: admin
    appName:
      name: appName
      in: path
      description: The app name.
      required: true
      schema:
        type: string
      example: app1
    fileName:
      name: fileName
      in: path
      description: The file name.
      required: true
      schema:
        type: string
      example: config.yaml

  #-------------------------------
  # Responses
  #-------------------------------
  responses:
    BadRequest:
      description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotAuthorized:
      description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: NOT FOUND - if the resource in request did not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error' 
    Conflict:
      description: CONFLICT - if the resource already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error' 
    InternalServerError:
      description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  #-------------------------------
  # Entities
  #-------------------------------
  schemas:    
    Error:
      description: |
        An error entity. 
      properties:
        message:
          type: string
          description: The error message.             
